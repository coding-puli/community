(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{50:function(e,t,n){"use strict";n.d(t,"b",(function(){return v})),n.d(t,"a",(function(){return y}));var r=n(0),a=n.n(r);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e){if(!e.ok)throw Error(e.statusText);return e}function u(e,t){var n=e.url,a=e.method,i=e.data,u=o(Object(r.useState)(!!e),2),c=u[0],s=u[1];return Object(r.useEffect)((function(){e&&e.url&&function(){if(!e)return;s(!0),"GET"===e.method&&e.data&&delete e.data;(function(e){var t=e.url,n=e.method,r=e.data,a=r?JSON.stringify(r):null,o=new Headers({"content-type":"application/json",Accept:"application/json"});return fetch(t,{method:n,body:a,headers:o}).then(l).then((function(e){return e.redirected?(window.location.replace(e.url),e.url):e.json()}))})(e).then((function(e){t(e)})).catch((function(e){s(!1),t(void 0,e)})).finally((function(){s(!1)}))}()}),[n,a,i]),c}function c(e,t){var n=t.type,r=t.data;switch(n){case"events":return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.assign({},e,{events:t})}(e,r);case"albums":return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.assign({},e,{albums:t})}(e,r)}}var s={setEvents:function(e){return{type:"events",data:e.data}},setAlbums:function(e){return{type:"albums",data:e}},EVENTS:"events",ALBUMS:"albums"},f={events:[],albums:[]};function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return b(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var y=Object(r.createContext)(f);function v(e){var t=e.children,n=e.method,o=e.url,i=(e.data,e.type),l=p(Object(r.useReducer)(c,f),2),b=l[0],v=l[1],h=(u({method:n,url:o},(function(e,t){var n;i==s.EVENTS?e?n=s.setEvents(e.events):t&&console.log(t):i==s.ALBUMS&&(e?n=s.setAlbums(e.albums):t&&console.log(t)),n&&(console.log(n),v(n))})),function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},b));return a.a.createElement(y.Provider,{value:h},t)}},53:function(e,t,n){var r=n(20),a=n(54);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},54:function(e,t,n){(t=n(21)(!1)).push([e.i,".tile {\n  display: flex;\n  margin: 4px;\n  border-radius: 8px;\n  flex: 1;\n  padding: 4px;\n  overflow: hidden;\n}\n\n\n.tile-content {\n  display: flex;\n  align-items: flex-end;\n  padding: 4px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: white;\n  font-size: 12px;\n}\n\n.tile-content label {\n  overflow: hidden;\n  text-overflow: ellipsis\n}",""]),e.exports=t},55:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return l}));var r=n(0),a=n(50);function o(){return Object(r.useContext)(a.a).events}function i(){return function(e){if(!e||0==e.length)return null;var t=Date.now(),n=1/0,r=-1;return e.forEach((function(e,a){var o=e.start_time,i=new Date(o).getTime(),l=Math.abs(i-t);l<n&&(n=l,r=a)})),e[r]}(o())}function l(){return Object(r.useContext)(a.a).albums}},58:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(0),a=n.n(r),o=n(87);function i(e,t){var n=function(e,t){return Object(o.a)(e).sum(t).sort((function(e,t){return e.value-t.value}))}(e,t);return n.descendants(),n}var l=n(84),u=n(88);function c(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw o}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){return Object(u.a)().tile(function(e,t){return function(n,r,a,o,i){Object(l.a)(n,0,0,e,t);var u,s=c(n.children);try{for(s.s();!(u=s.n()).done;){var f=u.value;f.x0=r+f.x0/e*(o-r),f.x1=r+f.x1/e*(o-r),f.y0=a+f.y0/t*(i-a),f.y1=a+f.y1/t*(i-a)}}catch(e){s.e(e)}finally{s.f()}}}(e,t)).size([e,t]).paddingInner(1).round(!1)}var d=n(86),m=n(85);function p(e){return Object(d.a)().domain([0,e]).range([0,e])}function b(e){var t=e.node,n=e.xScale,r=e.yScale,o=e.colorScale,i=e.onClick,l=e.imageGetter,u=e.isActive,c=e.showLabel,s=e.gap,f=t.x0,d=t.y0,m=t.x1,p=t.y1,b=t.data,y=b.name,v=n(f),h=r(d),g=n(m)-v,x=r(p)-h,w=o(y),j=void 0!==s?"".concat(s,"px"):s,E={position:"absolute",left:v,top:h,width:g,height:x,padding:j},O=j?"".concat(s/2,"px"):void 0,S=j?g-s:g,A=j?x-s:x,k={position:"absolute",display:"flex",left:O,top:O,backgroundColor:l?"none":w,width:S,height:A,zIndex:l?2:1,cursor:"pointer"},I=null;if(l){var C=l(b);if(C){var N={position:"absolute",display:"flex",left:O,top:O,width:S,height:A,objectFit:"cover"};if((I=[]).push(a.a.createElement("img",{key:"tile-image",className:"tile-image",style:N,src:C})),void 0!==u){var T={position:"absolute",left:O,top:O,width:S,height:A,opacity:u?"0":"80%",zIndex:1};I.push(a.a.createElement("div",{key:"tile-overlay",className:"tile-overlay",style:T}))}}}return a.a.createElement("div",{style:E},a.a.createElement("div",{style:{position:"relative"}},a.a.createElement("div",{key:"tile",style:k,onClick:i},a.a.createElement("div",{style:{padding:"8px",display:"flex",flex:"1"}},c?a.a.createElement("label",{style:{color:"white",alignSelf:"flex-end"}},y):null)),I))}n(53);function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function h(e){var t,n=e.data,o=e.width,l=void 0===o?500:o,u=e.height,c=void 0===u?500:u,s=e.sumIterator,d=e.onTileClick,v=e.imageGetter,h=e.activeId,g=e.showLabel,x=void 0!==g&&g,w=e.gap,j=y(Object(r.useState)(null),2),E=j[0],O=j[1],S=Object(r.useRef)(null),A=Object(r.useRef)(null),k=Object(r.useRef)(null);if(Object(r.useEffect)((function(){S.current=p(l),A.current=p(c),k.current=Object(m.a)(["#451119","#8b5b25","#936554"]);var e=i(n,s);!function(e,t,n){f(e,t)(n)}(l,c,e),O(e)}),[l,c]),!E||!n.children)return null;var I=E.children;I&&I.length>0&&(t=I.map((function(e,t){var n=void 0!==h?h==e.data.id:void 0;return a.a.createElement(b,{key:t,node:e,showLabel:x,isActive:n,imageGetter:v,onClick:function(){return d(e.data)},xScale:S.current,yScale:A.current,gap:w,colorScale:k.current})})));var C={position:"relative",width:l,height:c},N={position:"absolute",top:0,left:0,width:l,height:c};return a.a.createElement("div",{className:"tree-map"},a.a.createElement("div",{style:C},a.a.createElement("div",{style:N},t)))}},68:function(e,t,n){var r=n(20),a=n(69);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},69:function(e,t,n){(t=n(21)(!1)).push([e.i,".album-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.album-path {\n  font-size: 20px;\n  margin: 16px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--secondary-text-color);\n}\n\n.album-path-separator{\n  margin-left: 8px;\n  margin-right: 8px;\n  font-size: 24px;\n}\n\n.album {\n  display: flex;\n  justify-content: center;\n  width: 720px;\n  height: 400px;\n  flex-wrap: wrap;\n}\n\n.album-image {\n  width: 200px;\n  height: 200px;\n  margin: 8px;\n  position: relative;\n  border: 2px solid var(--secondary-bg-color);\n  border-radius: 4px;\n}\n\n.album img {\n  object-fit: cover;\n  width: 200px;\n  height: 200px;\n\n}\n\n.album-image-overlay {\n\n}\n\n.album-image-link a{\n  color: white;\n  align-self: flex-end;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.album-image-link {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 1;\n  display: flex;\n  padding: 8px;\n  justify-content: flex-end;\n}\n\n.album img:hover {\n  cursor: pointer;\n}\n\n\n\n.album-link{\n  border: 1px solid var(--secondary-text-color);\n  border-radius: 16px;\n  padding: 8px 24px;\n  background: var(--tertiary-bg-color);\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}",""]),e.exports=t},9:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var r=n(0),a=n.n(r),o=n(50),i=n(58),l=n(55);n(68);function u(e){var t=e.data,n=e.onClick,r=t.name,o=(t.link,t.photos.data.map((function(e,t){e.id;var n=e.images,r=e.link;return a.a.createElement("div",{className:"album-image"},a.a.createElement("div",{className:"album-image-link"},a.a.createElement("a",{href:r,target:"_blank"},"Link")),a.a.createElement("div",{className:"album-image-overlay"}),a.a.createElement("img",{src:n[1].source}))})));return a.a.createElement("div",{className:"album-container"},a.a.createElement("div",{className:"album-path"},a.a.createElement("a",{className:"album-link",onClick:function(){return n()}},"Albums"),a.a.createElement("span",{className:"album-path-separator"},"/"),r),a.a.createElement("div",{className:"album"},o))}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){var t=e.gap,n=Object(l.a)(),o=c(Object(r.useState)(null),2),s=o[0],f=o[1];if(!n||0==n.length)return null;function d(e){f(e)}var m={name:"albums",children:function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];"Profile pictures"!=r.name&&"Cover photos"!=r.name&&"Timeline Photos"!=r.name&&t.push(r)}return t}(n.data)},p=null;return p=s?a.a.createElement(u,{data:s,onClick:d}):a.a.createElement(i.a,{gap:t,data:m,onTileClick:d,width:840,imageGetter:function(e){var t=e.photos;return t&&t.data?t.data[0].images[0].source:""},sumIterator:function(e){return 1},showLabel:!0,height:400}),a.a.createElement("div",{className:"albums-container"},p)}var d="https://graph.facebook.com/me?fields=albums{name,link,photos{link,images}}&access_token=".concat("EAAGLgZB5xocIBABnei8kZAZAJfjgMdvAcEDGXDO3V0J4EE5TNCp0frJw9ST6edzUcfyu0LPScGo57lc6hMoR3SpuPGgB60D1A7K8Vd1HgZAbvN13MME4imRZBB8bVeTCo6WEZBLNUePuIrobi0lbZBvpWlPrI96Ydv1wE5aw8gNIwZDZD");function m(e){return a.a.createElement("div",{className:"gallery-page"},a.a.createElement(o.b,{url:d,method:"GET",type:"albums"},a.a.createElement(f,{gap:32})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,