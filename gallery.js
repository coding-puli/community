(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{50:function(e,t,n){"use strict";n.d(t,"b",(function(){return v})),n.d(t,"a",(function(){return y}));var r=n(0),a=n.n(r);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e){if(!e.ok)throw Error(e.statusText);return e}function u(e,t){var n=e.url,a=e.method,i=e.data,u=o(Object(r.useState)(!!e),2),c=u[0],s=u[1];return Object(r.useEffect)((function(){e&&e.url&&function(){if(!e)return;s(!0),"GET"===e.method&&e.data&&delete e.data;(function(e){var t=e.url,n=e.method,r=e.data,a=r?JSON.stringify(r):null,o=new Headers({"content-type":"application/json",Accept:"application/json"});return fetch(t,{method:n,body:a,headers:o}).then(l).then((function(e){return e.redirected?(window.location.replace(e.url),e.url):e.json()}))})(e).then((function(e){t(e)})).catch((function(e){s(!1),t(void 0,e)})).finally((function(){s(!1)}))}()}),[n,a,i]),c}function c(e,t){var n=t.type,r=t.data;switch(n){case"events":return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.assign({},e,{events:t})}(e,r);case"albums":return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.assign({},e,{albums:t})}(e,r)}}var s={setEvents:function(e){return{type:"events",data:e.data}},setAlbums:function(e){return{type:"albums",data:e}},EVENTS:"events",ALBUMS:"albums"},f={events:[],albums:[]};function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return b(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var y=Object(r.createContext)(f);function v(e){var t=e.children,n=e.method,o=e.url,i=(e.data,e.type),l=p(Object(r.useReducer)(c,f),2),b=l[0],v=l[1],h=(u({method:n,url:o},(function(e,t){var n;i==s.EVENTS?e?n=s.setEvents(e.events):t&&console.log(t):i==s.ALBUMS&&(e?n=s.setAlbums(e.albums):t&&console.log(t)),n&&(console.log(n),v(n))})),function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},b));return a.a.createElement(y.Provider,{value:h},t)}},52:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return l}));var r=n(0),a=n(50);function o(){return Object(r.useContext)(a.a).events}function i(){return function(e){if(!e||0==e.length)return null;var t=Date.now(),n=1/0,r=-1;return e.forEach((function(e,a){var o=e.start_time,i=new Date(o).getTime(),l=Math.abs(i-t);l<n&&(n=l,r=a)})),e[r]}(o())}function l(){return Object(r.useContext)(a.a).albums}},66:function(e,t,n){var r=n(20),a=n(67);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},67:function(e,t,n){(t=n(21)(!1)).push([e.i,".tile {\n  display: flex;\n  margin: 4px;\n  border-radius: 8px;\n  flex: 1;\n  padding: 4px;\n  overflow: hidden;\n}\n\n\n.tile-content {\n  display: flex;\n  align-items: flex-end;\n  padding: 4px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: white;\n  font-size: 12px;\n}\n\n.tile-content label {\n  overflow: hidden;\n  text-overflow: ellipsis\n}",""]),e.exports=t},68:function(e,t,n){var r=n(20),a=n(69);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},69:function(e,t,n){(t=n(21)(!1)).push([e.i,".album-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.album-path {\n  font-size: 20px;\n  margin: 16px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--secondary-text-color);\n}\n\n.album-path-separator{\n  margin-left: 8px;\n  margin-right: 8px;\n  font-size: 24px;\n}\n\n.album {\n  display: flex;\n  justify-content: center;\n  width: 720px;\n  height: 400px;\n  flex-wrap: wrap;\n}\n\n.album-image {\n  width: 200px;\n  height: 200px;\n  margin: 8px;\n  position: relative;\n  border: 2px solid var(--secondary-bg-color);\n  border-radius: 4px;\n}\n\n.album img {\n  object-fit: cover;\n  width: 200px;\n  height: 200px;\n\n}\n\n.album-image-overlay {\n\n}\n\n.album-image-link a{\n  color: white;\n  align-self: flex-end;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.album-image-link {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  z-index: 1;\n  display: flex;\n  padding: 8px;\n  justify-content: flex-end;\n}\n\n.album img:hover {\n  cursor: pointer;\n}\n\n\n\n.album-link{\n  border: 1px solid var(--secondary-text-color);\n  border-radius: 16px;\n  padding: 8px 24px;\n  background: var(--tertiary-bg-color);\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}",""]),e.exports=t},7:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return A}));var r=n(0),a=n.n(r),o=n(50),i=n(88);function l(e,t){var n=function(e,t){return Object(i.a)(e).sum(t).sort((function(e,t){return e.value-t.value}))}(e,t);return n.descendants(),n}var u=n(85),c=n(89);function s(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw o}}}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function d(e,t){return Object(c.a)().tile(function(e,t){return function(n,r,a,o,i){Object(u.a)(n,0,0,e,t);var l,c=s(n.children);try{for(c.s();!(l=c.n()).done;){var f=l.value;f.x0=r+f.x0/e*(o-r),f.x1=r+f.x1/e*(o-r),f.y0=a+f.y0/t*(i-a),f.y1=a+f.y1/t*(i-a)}}catch(e){c.e(e)}finally{c.f()}}}(e,t)).size([e,t]).paddingInner(1).round(!1)}var m=n(87),p=n(86);function b(e){return Object(m.a)().domain([0,e]).range([0,e])}function y(e){var t=e.node,n=e.xScale,r=e.yScale,o=e.colorScale,i=e.onClick,l=e.imageGetter,u=e.isActive,c=e.showLabel,s=e.gap,f=t.x0,d=t.y0,m=t.x1,p=t.y1,b=t.data,y=b.name,v=n(f),h=r(d),g=n(m)-v,x=r(p)-h,w=o(y),j=void 0!==s?"".concat(s,"px"):s,E={position:"absolute",left:v,top:h,width:g,height:x,padding:j},O=j?"".concat(s/2,"px"):void 0,S=j?g-s:g,A=j?x-s:x,k={position:"absolute",display:"flex",left:O,top:O,backgroundColor:l?"none":w,width:S,height:A,zIndex:l?2:1,cursor:"pointer"},I=null;if(l){var C=l(b);if(C){var N={position:"absolute",display:"flex",left:O,top:O,width:S,height:A,objectFit:"cover"};if((I=[]).push(a.a.createElement("img",{key:"tile-image",className:"tile-image",style:N,src:C})),void 0!==u){var T={position:"absolute",left:O,top:O,width:S,height:A,opacity:u?"0":"80%",zIndex:1};I.push(a.a.createElement("div",{key:"tile-overlay",className:"tile-overlay",style:T}))}}}return a.a.createElement("div",{style:E},a.a.createElement("div",{style:{position:"relative"}},a.a.createElement("div",{key:"tile",style:k,onClick:i},a.a.createElement("div",{style:{padding:"8px",display:"flex",flex:"1"}},c?a.a.createElement("label",{style:{color:"white",alignSelf:"flex-end"}},y):null)),I))}n(66);function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(e){var t,n=e.data,o=e.width,i=void 0===o?500:o,u=e.height,c=void 0===u?500:u,s=e.sumIterator,f=e.onTileClick,m=e.imageGetter,h=e.activeId,g=e.showLabel,x=void 0!==g&&g,w=e.gap,j=v(Object(r.useState)(null),2),E=j[0],O=j[1],S=Object(r.useRef)(null),A=Object(r.useRef)(null),k=Object(r.useRef)(null);if(Object(r.useEffect)((function(){S.current=b(i),A.current=b(c),k.current=Object(p.a)(["#451119","#8b5b25","#936554"]);var e=l(n,s);!function(e,t,n){d(e,t)(n)}(i,c,e),O(e)}),[i,c]),!E||!n.children)return null;var I=E.children;I&&I.length>0&&(t=I.map((function(e,t){var n=void 0!==h?h==e.data.id:void 0;return a.a.createElement(y,{key:t,node:e,showLabel:x,isActive:n,imageGetter:m,onClick:function(){return f(e.data)},xScale:S.current,yScale:A.current,gap:w,colorScale:k.current})})));var C={position:"relative",width:i,height:c},N={position:"absolute",top:0,left:0,width:i,height:c};return a.a.createElement("div",{className:"tree-map"},a.a.createElement("div",{style:C},a.a.createElement("div",{style:N},t)))}var x=n(52);n(68);function w(e){var t=e.data,n=e.onClick,r=t.name,o=(t.link,t.photos.data.map((function(e,t){e.id;var n=e.images,r=e.link;return a.a.createElement("div",{className:"album-image"},a.a.createElement("div",{className:"album-image-link"},a.a.createElement("a",{href:r,target:"_blank"},"Link")),a.a.createElement("div",{className:"album-image-overlay"}),a.a.createElement("img",{src:n[1].source}))})));return a.a.createElement("div",{className:"album-container"},a.a.createElement("div",{className:"album-path"},a.a.createElement("a",{className:"album-link",onClick:function(){return n()}},"Albums"),a.a.createElement("span",{className:"album-path-separator"},"/"),r),a.a.createElement("div",{className:"album"},o))}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return E(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function O(e){var t=e.gap,n=Object(x.a)(),o=j(Object(r.useState)(null),2),i=o[0],l=o[1];if(!n||0==n.length)return null;function u(e){l(e)}var c={name:"albums",children:function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];"Profile pictures"!=r.name&&"Cover photos"!=r.name&&"Timeline Photos"!=r.name&&t.push(r)}return t}(n.data)},s=null;return s=i?a.a.createElement(w,{data:i,onClick:u}):a.a.createElement(g,{gap:t,data:c,onTileClick:u,width:840,imageGetter:function(e){var t=e.photos;return t&&t.data?t.data[0].images[0].source:""},sumIterator:function(e){return 1},showLabel:!0,height:400}),a.a.createElement("div",{className:"albums-container"},s)}var S="https://graph.facebook.com/me?fields=albums{name,link,photos{link,images}}&access_token=".concat("EAAGLgZB5xocIBABnei8kZAZAJfjgMdvAcEDGXDO3V0J4EE5TNCp0frJw9ST6edzUcfyu0LPScGo57lc6hMoR3SpuPGgB60D1A7K8Vd1HgZAbvN13MME4imRZBB8bVeTCo6WEZBLNUePuIrobi0lbZBvpWlPrI96Ydv1wE5aw8gNIwZDZD");function A(e){return a.a.createElement("div",{className:"gallery-page"},a.a.createElement(o.b,{url:S,method:"GET",type:"albums"},a.a.createElement(O,{gap:32})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hYnN0cmFjdC9ob29rcy91c2VSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL2NvbnRleHQvcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udGV4dC9yZWR1Y2Vycy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9jb250ZXh0L3Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL2NvbnRleHQvY29uc3VtZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYWJzdHJhY3QvdWkvdHJlZW1hcC9zdHlsZS5jc3M/ZWFmNSIsIndlYnBhY2s6Ly8vLi9hYnN0cmFjdC91aS90cmVlbWFwL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FsYnVtcy9zdHlsZS5jc3M/M2IyNCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FsYnVtcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vYWJzdHJhY3QvZDNIZWxwZXIvdHJlZUNhbGN1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vYWJzdHJhY3QvZDNIZWxwZXIvbGF5b3V0Q2FsY3VsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9hYnN0cmFjdC9kM0hlbHBlci9zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9hYnN0cmFjdC91aS90cmVlbWFwL1RpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vYWJzdHJhY3QvdWkvdHJlZW1hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FsYnVtcy9hbGJ1bS5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FsYnVtcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWdlcy9nYWxsZXJ5L2luZGV4LmpzIl0sIm5hbWVzIjpbImhhbmRsZUVycm9ycyIsInJlc3BvbnNlIiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJ1c2VSZXF1ZXN0IiwicmVxdWVzdCIsInJlc3BvbnNlSGFuZGxlciIsInVybCIsIm1ldGhvZCIsImRhdGEiLCJ1c2VTdGF0ZSIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwidXNlRWZmZWN0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwiSGVhZGVycyIsImZldGNoIiwidGhlbiIsInJlZGlyZWN0ZWQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcGxhY2UiLCJqc29uIiwiYWpheEZldGNoIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJsb2FkRGF0YSIsInJlZHVjZXIiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJjdXJyZW50U3RhdGUiLCJuZXdWYWx1ZSIsIk9iamVjdCIsImFzc2lnbiIsImV2ZW50cyIsInVwZGF0ZUV2ZW50cyIsImFsYnVtcyIsInVwZGF0ZUFsYnVtcyIsImFjdGlvbkNyZWF0b3JzIiwic2V0RXZlbnRzIiwic2V0QWxidW1zIiwiRVZFTlRTIiwiQUxCVU1TIiwic3RvcmUiLCJEYXRhQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJTZXJ2aWNlUHJvdmlkZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwidXNlUmVkdWNlciIsImdsb2JhbFN0YXRlIiwiZGlzcGF0Y2giLCJjb250ZXh0IiwiYWN0aW9uT2JqIiwiY29uc29sZSIsImxvZyIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VHZXRFdmVudHMiLCJ1c2VDb250ZXh0IiwidXNlR2V0TmVhcmVzdEV2ZW50IiwibGVuZ3RoIiwiY3VycmVudFRpbWUiLCJEYXRlIiwibm93IiwibmVhcmVzdCIsIkluZmluaXR5IiwibmVhcmVzdERhdGVJbmRleCIsImZvckVhY2giLCJldmVudCIsImluZGV4IiwiZGF0ZUFzU3RyIiwidGltZSIsImdldFRpbWUiLCJkaXN0YW5jZSIsIk1hdGgiLCJhYnMiLCJuZWFyZXN0RXZlbnQiLCJ1c2VHZXRBbGJ1bXMiLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtb2R1bGUiLCJpIiwib3B0aW9ucyIsImV4cG9ydHMiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJwdXNoIiwiY29tcHV0ZVRyZWVBdHRyaWJ1dGVzQW5kR2V0Um9vdCIsInN1bUl0ZXJhdG9yIiwicm9vdE5vZGUiLCJoaWVyYXJjaHkiLCJzdW0iLCJzb3J0IiwiYSIsImIiLCJnZXRSb290Tm9kZVdpdGhUcmVlVmFsdWVzIiwiZGVzY2VuZGFudHMiLCJnZXRUcmVlTWFwTGF5b3V0Q2FsY3VsYXRvciIsIndpZHRoIiwiaGVpZ2h0IiwidHJlZW1hcCIsInRpbGUiLCJub2RlIiwieDAiLCJ5MCIsIngxIiwieTEiLCJ0cmVlbWFwQmluYXJ5IiwiY2hpbGQiLCJjdXN0b21UaWxpbmciLCJzaXplIiwicGFkZGluZ0lubmVyIiwicm91bmQiLCJnZXRMaW5lYXJTY2FsZUdldHRlciIsInNjYWxlTWF4VmFsdWUiLCJzY2FsZUxpbmVhciIsImRvbWFpbiIsInJhbmdlIiwiVHJlZU5vZGUiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJjb2xvclNjYWxlIiwib25DbGljayIsImltYWdlR2V0dGVyIiwiaXNBY3RpdmUiLCJzaG93TGFiZWwiLCJnYXAiLCJuYW1lIiwieFBvcyIsInlQb3MiLCJub2RlV2lkdGgiLCJub2RlSGVpZ2h0IiwiY29sb3JWYWx1ZSIsInBhZGRpbmciLCJ0aWxlU3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJkZWx0YSIsIm5vZGVTdHlsZSIsImRpc3BsYXkiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ6SW5kZXgiLCJjdXJzb3IiLCJpbWFnZVVJIiwiaW1hZ2VVUkwiLCJpbWdTdHlsZSIsIm9iamVjdEZpdCIsImtleSIsImNsYXNzTmFtZSIsInN0eWxlIiwic3JjIiwib3ZlcmxheVN0eWxlIiwib3BhY2l0eSIsImZsZXgiLCJjb2xvciIsImFsaWduU2VsZiIsIlRyZWVNYXAiLCJub2Rlc1VJIiwib25UaWxlQ2xpY2siLCJhY3RpdmVJZCIsInNldFJvb3ROb2RlIiwieFNjYWxlUmVmIiwidXNlUmVmIiwieVNjYWxlUmVmIiwiY29sb3JTY2FsZVJlZiIsImN1cnJlbnQiLCJzY2FsZU9yZGluYWwiLCJjb21wdXRlZFJvb3ROb2RlIiwibGF5b3V0Q2FsY3VsYXRvciIsImNvbXB1dGVMYXlvdXRWYWx1ZXMiLCJub2RlcyIsIm1hcCIsImNoaWxkTm9kZSIsImlkIiwicmVsYXRpdmVDb250YWluZXJTdHlsZSIsImFic29sdXRlQ29udGFpbmVyU3R5bGUiLCJBbGJ1bSIsImltYWdlc1VJIiwibGluayIsInBob3RvcyIsImltYWdlT2JqIiwic2l6ZWRJbWFnZXMiLCJpbWFnZXMiLCJocmVmIiwidGFyZ2V0Iiwic291cmNlIiwiQWxidW1zIiwiYWN0aXZlRGF0YSIsInNldEFjdGl2ZURhdGEiLCJ0aWxlQ2xpY2tIYW5kbGVyIiwidHJlZURhdGEiLCJmaWx0ZXJlZEFsYnVtcyIsImFsYnVtIiwiZXhjbHVkZUFsYnVtcyIsInVpIiwiaXRlbSIsImFsYnVtc1VybCIsIkdhbGxlcnkiXSwibWFwcGluZ3MiOiJ3bkNBRUEsU0FBU0EsRUFBYUMsR0FDckIsSUFBS0EsRUFBU0MsR0FDYixNQUFNQyxNQUFNRixFQUFTRyxZQUV0QixPQUFPSCxFQXlCTyxTQUFTSSxFQUFXQyxFQUFTQyxHQUFpQixJQUNyREMsRUFBcUJGLEVBQXJCRSxJQUFLQyxFQUFnQkgsRUFBaEJHLE9BQVFDLEVBQVFKLEVBQVJJLEtBRHdDLElBRTlCQyxxQkFBV0wsR0FGbUIsR0FFckRNLEVBRnFELEtBRTVDQyxFQUY0QyxLQWdDNUQsT0E1QkFDLHFCQUFVLFdBQ0pSLEdBQVdBLEVBQVFFLEtBS3pCLFdBQ0MsSUFBS0YsRUFDSixPQUVETyxHQUFXLEdBRVksUUFBbkJQLEVBQVFHLFFBQW9CSCxFQUFRSSxhQUNoQ0osRUFBUUksTUF0Q2xCLFlBQXVDLElBQW5CRixFQUFtQixFQUFuQkEsSUFBS0MsRUFBYyxFQUFkQSxPQUFRQyxFQUFNLEVBQU5BLEtBQzFCSyxFQUFPTCxFQUFPTSxLQUFLQyxVQUFVUCxHQUFRLEtBS3JDUSxFQUFVLElBQUlDLFFBSkUsQ0FDckIsZUFBZ0IsbUJBQ2hCLE9BQVMscUJBSVYsT0FBT0MsTUFBTVosRUFEUSxDQUFFQyxTQUFRTSxPQUFNRyxZQUVwQ0cs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ckosSUFBS3FNLEVBQVdwTSxPQUFPLE1BQU15QixLQUFLLFVBQ2pELGtCQUFDaUssRUFBRCxDQUFRN0QsSUFBSyIsImZpbGUiOiJnYWxsZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gaGFuZGxlRXJyb3JzKHJlc3BvbnNlKSB7XG5cdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHR0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0fVxuXHRyZXR1cm4gcmVzcG9uc2U7XG59XG5cblxuZnVuY3Rpb24gYWpheEZldGNoKHt1cmwsIG1ldGhvZCwgZGF0YX0pe1xuXHRjb25zdCBib2R5ID0gZGF0YSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogbnVsbDtcblx0Y29uc3QgaGVhZGVyT3B0aW9ucyA9IHtcblx0XHQnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdCdBY2NlcHQnOidhcHBsaWNhdGlvbi9qc29uJ1xuXHR9O1xuXHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoaGVhZGVyT3B0aW9ucyk7XG5cdGNvbnN0IGZldGNoT3B0aW9ucyA9IHsgbWV0aG9kLCBib2R5LCBoZWFkZXJzfTtcblx0cmV0dXJuIGZldGNoKHVybCxmZXRjaE9wdGlvbnMpXG5cdC50aGVuKGhhbmRsZUVycm9ycylcblx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRpZihyZXNwb25zZS5yZWRpcmVjdGVkKXtcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlc3BvbnNlLnVybCk7XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2UudXJsXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdFx0fVxuXHR9KVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJlcXVlc3QocmVxdWVzdCwgcmVzcG9uc2VIYW5kbGVyKSB7XG5cdGNvbnN0IHt1cmwsIG1ldGhvZCwgZGF0YX0gPSByZXF1ZXN0O1xuXHRjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSghIXJlcXVlc3QpO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0XHRpZiAocmVxdWVzdCAmJiByZXF1ZXN0LnVybCkge1xuXHRcdFx0XHRsb2FkRGF0YSgpO1xuXHRcdFx0fVxuXHRcdH0sIFt1cmwsIG1ldGhvZCwgZGF0YV0pO1xuXG5cdGZ1bmN0aW9uIGxvYWREYXRhKCkge1xuXHRcdGlmICghcmVxdWVzdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRzZXRMb2FkaW5nKHRydWUpO1xuXG5cdFx0aWYgKHJlcXVlc3QubWV0aG9kID09PSAnR0VUJyAmJiByZXF1ZXN0LmRhdGEpIHtcblx0XHRcdGRlbGV0ZSByZXF1ZXN0LmRhdGE7XG5cdFx0fVxuXG5cdFx0YWpheEZldGNoKHJlcXVlc3QpXG5cdFx0LnRoZW4ocmVzcG9uc2UgPT4ge1xuXHRcdFx0cmVzcG9uc2VIYW5kbGVyKHJlc3BvbnNlKVxuXHRcdH0pLmNhdGNoKChlcnJvcikgPT4ge1xuXHRcdFx0c2V0TG9hZGluZyhmYWxzZSk7XG5cdFx0XHRyZXNwb25zZUhhbmRsZXIodW5kZWZpbmVkLCBlcnJvcilcblx0XHR9KVxuXHRcdC5maW5hbGx5KCgpID0+IHtcblx0XHRcdHNldExvYWRpbmcoZmFsc2UpO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGxvYWRpbmc7XG59XG4iLCIvLyBhY3Rpb25zXG5jb25zdCBFVkVOVFMgPSBcImV2ZW50c1wiO1xuY29uc3QgQUxCVU1TID0gXCJhbGJ1bXNcIjtcblxuLy8gYWN0aW9uIGNyZWF0b3JzIC8vIHRoZXNlIGFyZSBkaXNwYXRjaGVkIGJ5IHNlbmRpbmcgdGhlIHJldHVybiB0eXBlIG9mIGFjdGlvbiBjcmVhdG9yc1xuZnVuY3Rpb24gc2V0RXZlbnRzKGV2ZW50cyl7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogRVZFTlRTLFxuXHRcdGRhdGE6IGV2ZW50cy5kYXRhXG5cdH1cbn1cblxuZnVuY3Rpb24gc2V0QWxidW1zKGFsYnVtcyl7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogQUxCVU1TLFxuXHRcdGRhdGE6IGFsYnVtc1xuXHR9XG59XG5cblxuZnVuY3Rpb24gdXBkYXRlRXZlbnRzKGN1cnJlbnRTdGF0ZSwgbmV3VmFsdWUgPSBbXSl7XG5cdHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjdXJyZW50U3RhdGUse1xuXHRcdGV2ZW50czogbmV3VmFsdWVcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFsYnVtcyhjdXJyZW50U3RhdGUsIG5ld1ZhbHVlID0gW10pe1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY3VycmVudFN0YXRlLHtcblx0XHRhbGJ1bXM6IG5ld1ZhbHVlXG5cdH0pO1xufVxuXG4vLyByZWR1Y2VyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pe1xuXHRjb25zdCB7dHlwZSwgZGF0YX0gPSBhY3Rpb247XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdGNhc2UgRVZFTlRTOlxuXHRcdFx0cmV0dXJuIHVwZGF0ZUV2ZW50cyhzdGF0ZSwgZGF0YSlcblx0XHRjYXNlIEFMQlVNUzpcblx0XHRcdHJldHVybiB1cGRhdGVBbGJ1bXMoc3RhdGUsIGRhdGEpXG5cdH1cbn1cblxuXG5leHBvcnQgY29uc3QgYWN0aW9uQ3JlYXRvcnMgPSB7XG5cdHNldEV2ZW50cyxcblx0c2V0QWxidW1zLFxuXHRFVkVOVFMsXG5cdEFMQlVNU1xufTtcbiIsImNvbnN0IHN0b3JlID0ge1xuXHRldmVudHM6IFtdLFxuXHRhbGJ1bXM6IFtdXG59O1xuXG5cbmV4cG9ydCB7XG5cdHN0b3JlXG59IiwiaW1wb3J0IFJlYWN0LCB7Y3JlYXRlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VSZWR1Y2VyfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAgIHVzZVJlcXVlc3QgZnJvbSBcImFic3RyYWN0L2hvb2tzL3VzZVJlcXVlc3RcIjtcbmltcG9ydCAgcmVkdWNlciwge2FjdGlvbkNyZWF0b3JzfSBmcm9tIFwiLi9yZWR1Y2Vyc1wiO1xuaW1wb3J0ICB7c3RvcmV9IGZyb20gXCIuL3JlZHVjZXJzL3N0b3JlXCI7XG5cblxuY29uc3QgRGF0YUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHN0b3JlKTtcblxuLy90b2RvIFJlZmFjdG9yXG4vLyAxLiBhYnN0cmFjdFxuLy8gMi4gb3B0aW9uIGZvciBMYXp5IGZldGNoaW5nXG5mdW5jdGlvbiBTZXJ2aWNlUHJvdmlkZXIocHJvcHMpe1xuXHRjb25zdCB7IGNoaWxkcmVuLCBtZXRob2QsIHVybCwgZGF0YSwgdHlwZSB9ID0gcHJvcHM7XG5cdGNvbnN0IFtnbG9iYWxTdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihyZWR1Y2VyLCBzdG9yZSk7XG5cblx0Y29uc3QgbG9hZGluZyA9IHVzZVJlcXVlc3Qoe21ldGhvZCwgdXJsfSwgKHJlc3BvbnNlLCBlcnJvcik9Pntcblx0XHRsZXQgYWN0aW9uT2JqO1xuXHRcdGlmKHR5cGUgPT0gYWN0aW9uQ3JlYXRvcnMuRVZFTlRTKXtcblx0XHRcdGlmKHJlc3BvbnNlKXtcblx0XHRcdFx0YWN0aW9uT2JqID0gYWN0aW9uQ3JlYXRvcnMuc2V0RXZlbnRzKHJlc3BvbnNlLmV2ZW50cylcblx0XHRcdH0gZWxzZSBpZihlcnJvcil7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYodHlwZSA9PSBhY3Rpb25DcmVhdG9ycy5BTEJVTVMpe1xuXHRcdFx0aWYocmVzcG9uc2Upe1xuXHRcdFx0XHRhY3Rpb25PYmogPSBhY3Rpb25DcmVhdG9ycy5zZXRBbGJ1bXMocmVzcG9uc2UuYWxidW1zKVxuXHRcdFx0fSBlbHNlIGlmKGVycm9yKXtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihhY3Rpb25PYmopeyAvLyByZS1yZW5kZXJcblx0XHRcdGNvbnNvbGUubG9nKGFjdGlvbk9iailcblx0XHRcdGRpc3BhdGNoKGFjdGlvbk9iailcblx0XHR9XG5cdH0pO1xuXG5cblx0aWYobG9hZGluZykge1xuXHRcdC8vIGFkZCBMb2FkZXIgVUkgYXMgY2hpbGRyZW4gd2l0aCB6LWluZGV4IDEgb24gdG9wIG9mIGNoaWxkcmVuXG5cdH1cblxuXHRjb25zdCBjb250ZXh0ID0geyAuLi5nbG9iYWxTdGF0ZSB9O1xuXHRyZXR1cm4gKFxuXHRcdDxEYXRhQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0PC9EYXRhQ29udGV4dC5Qcm92aWRlcj5cblx0KVxufVxuXG5mdW5jdGlvbiB1c2VHZXRDb250ZXh0U3RhdGVGb3JSZXF1ZXN0KHJlZHVjZXIsIHN0b3JlLCByZXF1ZXN0SGFuZGxlcil7XG5cdGNvbnN0IFtnbG9iYWxTdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihyZWR1Y2VyLCBzdG9yZSk7XG5cdHJlcXVlc3RIYW5kbGVyKClcblxufVxuXG5cblxuZXhwb3J0IHtcblx0Ly8gcHJvdmlkZXJcblx0U2VydmljZVByb3ZpZGVyLFxuXHQvLyBjb25zdW1lcnNcblx0RGF0YUNvbnRleHRcbn0iLCJpbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0LCB1c2VFZmZlY3QsdXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7RGF0YUNvbnRleHR9IGZyb20gJy4vcHJvdmlkZXInO1xuXG5mdW5jdGlvbiBuZWFyZXN0RXZlbnQoZXZlbnRzKSB7XG5cdGlmKCFldmVudHMgfHwgZXZlbnRzLmxlbmd0aCA9PSAwKXtcblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcblxuXHRjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG5cblx0bGV0IG5lYXJlc3QgPSBJbmZpbml0eTtcblx0bGV0IG5lYXJlc3REYXRlSW5kZXggPSAtMTtcblxuXHRldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQsIGluZGV4KSB7XG5cdFx0Y29uc3QgZGF0ZUFzU3RyID0gZXZlbnRbJ3N0YXJ0X3RpbWUnXTtcblx0XHRjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZUFzU3RyKTtcblx0XHRjb25zdCB0aW1lID0gZGF0ZS5nZXRUaW1lKCk7XG5cdFx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLmFicyh0aW1lIC0gY3VycmVudFRpbWUpO1xuXHRcdGlmIChkaXN0YW5jZSA8IG5lYXJlc3QpIHtcblx0XHRcdG5lYXJlc3QgPSBkaXN0YW5jZTtcblx0XHRcdG5lYXJlc3REYXRlSW5kZXggPSBpbmRleFxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBldmVudHNbbmVhcmVzdERhdGVJbmRleF07XG59XG5cblxuZnVuY3Rpb24gdXNlR2V0RXZlbnRzKCl7XG5cdGNvbnN0IHtldmVudHN9ID0gdXNlQ29udGV4dChEYXRhQ29udGV4dCk7XG5cdHJldHVybiBldmVudHM7XG59XG5cbmZ1bmN0aW9uIHVzZUdldE5lYXJlc3RFdmVudCgpe1xuXHRjb25zdCBldmVudHMgPSB1c2VHZXRFdmVudHMoKTtcblx0cmV0dXJuIG5lYXJlc3RFdmVudChldmVudHMpO1xufVxuXG5mdW5jdGlvbiB1c2VHZXRFdmVudEZyb21TdG9yZShldmVudElkKXtcblx0Y29uc3Qge2V2ZW50c30gPSB1c2VDb250ZXh0KERhdGFDb250ZXh0KTtcblx0Y29uc3QgdG90YWxFdmVudHMgPSAgZXZlbnRzLmxlbmd0aDtcblxuXHRsZXQgZXZlbnQ7XG5cblx0Zm9yIChsZXQgaT0wOyBpIDwgdG90YWxFdmVudHM7IGkrKyl7XG5cdFx0ZXZlbnQgPSBldmVudHNbaV07XG5cdFx0aWYoZXZlbnQuaWQgPT09IGV2ZW50SWQpe1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiB1c2VHZXRBbGJ1bXMoKXtcblx0Y29uc3Qge2FsYnVtc30gPSB1c2VDb250ZXh0KERhdGFDb250ZXh0KTtcblx0cmV0dXJuIGFsYnVtcztcbn1cblxuLy8gdG9kbzogc3VwcG9ydCBsYXp5IGZldGNoaW5nXG4vLyBmaXJzdCB0aW1lIGZldGNoIGZyb20gc2VydmVyIGFuZCBzdG9yZSBpbiBsb2NhbCBzdG9yZVxuLy8gc2Vjb25kIHRpbWUgZmV0Y2ggZnJvbSBzdG9yZVxuZnVuY3Rpb24gdXNlR2V0QWxidW1Gcm9tU3RvcmUoYWxidW1JZCl7XG5cdGNvbnN0IHthbGJ1bXN9ID0gdXNlQ29udGV4dChEYXRhQ29udGV4dCk7XG5cdGNvbnN0IHRvdGFsQWxidW1zID0gIGFsYnVtcy5sZW5ndGg7XG5cblx0bGV0IGFsYnVtO1xuXG5cdGZvciAobGV0IGk9MDsgaSA8IHRvdGFsQWxidW1zOyBpKyspe1xuXHRcdGFsYnVtID0gYWxidW1zW2ldO1xuXHRcdGlmKGFsYnVtLmlkID09PSBhbGJ1bUlkKXtcblx0XHRcdHJldHVybiBhbGJ1bTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0dXNlR2V0RXZlbnRzLFxuXHR1c2VHZXROZWFyZXN0RXZlbnQsXG5cdHVzZUdldEV2ZW50RnJvbVN0b3JlLFxuXHR1c2VHZXRBbGJ1bXMsXG5cdHVzZUdldEFsYnVtRnJvbVN0b3JlXG59IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50aWxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBtYXJnaW46IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGZsZXg6IDE7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG5cXG4udGlsZS1jb250ZW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDEycHg7XFxufVxcblxcbi50aWxlLWNvbnRlbnQgbGFiZWwge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzXFxufVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmFsYnVtLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5hbGJ1bS1wYXRoIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIG1hcmdpbjogMTZweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xcbn1cXG5cXG4uYWxidW0tcGF0aC1zZXBhcmF0b3J7XFxuICBtYXJnaW4tbGVmdDogOHB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxuICBmb250LXNpemU6IDI0cHg7XFxufVxcblxcbi5hbGJ1bSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogNzIwcHg7XFxuICBoZWlnaHQ6IDQwMHB4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG5cXG4uYWxidW0taW1hZ2Uge1xcbiAgd2lkdGg6IDIwMHB4O1xcbiAgaGVpZ2h0OiAyMDBweDtcXG4gIG1hcmdpbjogOHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tc2Vjb25kYXJ5LWJnLWNvbG9yKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLmFsYnVtIGltZyB7XFxuICBvYmplY3QtZml0OiBjb3ZlcjtcXG4gIHdpZHRoOiAyMDBweDtcXG4gIGhlaWdodDogMjAwcHg7XFxuXFxufVxcblxcbi5hbGJ1bS1pbWFnZS1vdmVybGF5IHtcXG5cXG59XFxuXFxuLmFsYnVtLWltYWdlLWxpbmsgYXtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5hbGJ1bS1pbWFnZS1saW5rIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgcmlnaHQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgei1pbmRleDogMTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG5cXG4uYWxidW0gaW1nOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuXFxuXFxuLmFsYnVtLWxpbmt7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcik7XFxuICBib3JkZXItcmFkaXVzOiAxNnB4O1xcbiAgcGFkZGluZzogOHB4IDI0cHg7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS10ZXJ0aWFyeS1iZy1jb2xvcik7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJpbXBvcnQge2hpZXJhcmNoeX0gZnJvbSBcImQzLWhpZXJhcmNoeVwiO1xuXG4vKlxuKiBDcmVhdGVzIFJvb3QgTm9kZSBPYmplY3QgY29tcHV0aW5nIHRyZWUgdmFsdWVzLFxuKiAxLiBEZXB0aCAsXG4qIDIuIEhlaWdodCAoQ2hpbGRyZW4gQ291bnQpXG4qIDMuIFZhbHVlIChCYXNlZCBvbiB0aGUgaXRlcmF0b3Igd2UgZ2l2ZSBmb3IgU3VtIClcbiogKi9cbmZ1bmN0aW9uIGdldFJvb3ROb2RlV2l0aFRyZWVWYWx1ZXMoZGF0YSwgc3VtSXRlcmF0b3Ipe1xuXHRyZXR1cm4gaGllcmFyY2h5KGRhdGEpXG5cdC5zdW0oc3VtSXRlcmF0b3IpXG5cdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IC8vIGFzY2VuZGluZyBvcmRlciwgc28gdGhhdCBsb3cgdmFsdWVzIGdldCBiaWdnZXIgc3F1YXJlXG5cdFx0cmV0dXJuICBhLnZhbHVlIC0gYi52YWx1ZVxuXHR9KVxufVxuXG5cbmZ1bmN0aW9uIGNvbXB1dGVUcmVlQXR0cmlidXRlc0FuZEdldFJvb3QoZGF0YSwgc3VtSXRlcmF0b3Ipe1xuXHRjb25zdCByb290Tm9kZSA9IGdldFJvb3ROb2RlV2l0aFRyZWVWYWx1ZXMoZGF0YSxzdW1JdGVyYXRvcik7XG5cdC8vICBjb21wdXRpbmcgdHJlZSBWYWx1ZXMgZm9yIHRoZSBkZXNjZW5kYW50cyBub2RlcyBvZiByb290IG5vZGVcblx0cm9vdE5vZGUuZGVzY2VuZGFudHMoKTtcblx0cmV0dXJuIHJvb3ROb2RlO1xufVxuXG5mdW5jdGlvbiBnZXRBbmNlc3RvcnNQYXRoRm9yKHNlbGVjdGVkTm9kZSwgaGFuZGxlcil7XG5cdGlmKCFzZWxlY3RlZE5vZGUgfHwgIXNlbGVjdGVkTm9kZS5hbmNlc3RvcnMpe1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHJldHVybiBzZWxlY3RlZE5vZGUuYW5jZXN0b3JzKCkucmV2ZXJzZSgpO1xufVxuXG5mdW5jdGlvbiBnZXROb2RlKHJvb3ROb2RlLCBub2RlSWQpe1xuXHRyZXR1cm4gcm9vdE5vZGUuZGVzY2VuZGFudHMoKS5maW5kKG8gPT4gby5kYXRhLmRhdGFJZCA9PT0gbm9kZUlkKTtcbn1cblxuZXhwb3J0IHtcblx0Y29tcHV0ZVRyZWVBdHRyaWJ1dGVzQW5kR2V0Um9vdCxcblx0Z2V0QW5jZXN0b3JzUGF0aEZvcixcblx0Z2V0Tm9kZVxufVxuIiwiaW1wb3J0IHt0cmVlbWFwLCB0cmVlbWFwQmluYXJ5IH0gZnJvbSBcImQzLWhpZXJhcmNoeVwiO1xuXG5mdW5jdGlvbiBjdXN0b21UaWxpbmcod2lkdGgsIGhlaWdodCl7XG5cdHJldHVybiAobm9kZSwgeDAsIHkwLCB4MSwgeTEpID0+IHtcblx0XHR0cmVlbWFwQmluYXJ5KG5vZGUsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xuXHRcdFx0Y2hpbGQueDAgPSB4MCArIGNoaWxkLngwIC8gd2lkdGggKiAoeDEgLSB4MCk7XG5cdFx0XHRjaGlsZC54MSA9IHgwICsgY2hpbGQueDEgLyB3aWR0aCAqICh4MSAtIHgwKTtcblx0XHRcdGNoaWxkLnkwID0geTAgKyBjaGlsZC55MCAvIGhlaWdodCAqICh5MSAtIHkwKTtcblx0XHRcdGNoaWxkLnkxID0geTAgKyBjaGlsZC55MSAvIGhlaWdodCAqICh5MSAtIHkwKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0VHJlZU1hcExheW91dENhbGN1bGF0b3Iod2lkdGgsaGVpZ2h0KXtcblx0cmV0dXJuIHRyZWVtYXAoKVxuXHQudGlsZShjdXN0b21UaWxpbmcod2lkdGgsaGVpZ2h0KSlcblx0LnNpemUoW3dpZHRoLCBoZWlnaHRdKVxuXHQucGFkZGluZ0lubmVyKDEpXG5cdC5yb3VuZChmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVMYXlvdXRWYWx1ZXMod2lkdGgsaGVpZ2h0LCByb290Tm9kZSl7XG5cdGNvbnN0IGxheW91dENhbGN1bGF0b3IgPSBnZXRUcmVlTWFwTGF5b3V0Q2FsY3VsYXRvcih3aWR0aCxoZWlnaHQpO1xuXHRsYXlvdXRDYWxjdWxhdG9yKHJvb3ROb2RlKTtcbn1cblxuZXhwb3J0IHtcblx0Y29tcHV0ZUxheW91dFZhbHVlc1xufSIsImltcG9ydCB7c2NhbGVMaW5lYXIsIHNjYWxlT3JkaW5hbCB9IGZyb20gXCJkMy1zY2FsZVwiO1xuXG5mdW5jdGlvbiBnZXRMaW5lYXJTY2FsZUdldHRlcihzY2FsZU1heFZhbHVlKXtcblx0cmV0dXJuIHNjYWxlTGluZWFyKClcblx0LmRvbWFpbihbMCwgc2NhbGVNYXhWYWx1ZV0pXG5cdC5yYW5nZShbMCwgc2NhbGVNYXhWYWx1ZV0pO1xufVxuXG4vL2h0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZS1jaHJvbWF0aWMvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kXG5mdW5jdGlvbiBnZXRPcmRpbmFsU2NhbGVHZXR0ZXIoKXtcblx0cmV0dXJuIHNjYWxlT3JkaW5hbChbJyM0NTExMTknLCAnIzhiNWIyNScsICcjOTM2NTU0J10pXG59XG5cbmV4cG9ydCB7XG5cdGdldExpbmVhclNjYWxlR2V0dGVyLFxuXHRnZXRPcmRpbmFsU2NhbGVHZXR0ZXJcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJlZU5vZGUocHJvcHMpe1xuXHRjb25zdCB7IG5vZGUsIHhTY2FsZSwgeVNjYWxlLCBjb2xvclNjYWxlLCBvbkNsaWNrLCBpbWFnZUdldHRlciwgaXNBY3RpdmUgLCBzaG93TGFiZWwsIGdhcH0gPSBwcm9wcztcblxuXHRjb25zdCB7IHgwLCB5MCwgeDEsIHkxLCBkYXRhfSA9IG5vZGU7XG5cdGNvbnN0IHtuYW1lfSA9IGRhdGE7XG5cblx0Ly8gMS4gRGltZW5zaW9uc1xuXHRjb25zdCB4UG9zID0geFNjYWxlKHgwKTtcblx0Y29uc3QgeVBvcyA9IHlTY2FsZSh5MCk7XG5cdGNvbnN0IG5vZGVXaWR0aCA9ICh4U2NhbGUoeDEpIC0geFBvcyk7XG5cdGNvbnN0IG5vZGVIZWlnaHQgPSAoeVNjYWxlKHkxKSAtIHlQb3MpO1xuXG5cdC8vIDIuIEJhY2tncm91bmQgY29sb3IgdmFsdWVzXG5cdGNvbnN0IGNvbG9yVmFsdWUgPSBjb2xvclNjYWxlKG5hbWUpO1xuXG5cdGNvbnN0IHBhZGRpbmcgPSBnYXAgIT09IHVuZGVmaW5lZCA/YCR7Z2FwfXB4YCA6IGdhcDtcblx0Y29uc3QgdGlsZVN0eWxlID0ge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IHhQb3MsXG4gICAgdG9wOiB5UG9zLFxuICAgIHdpZHRoOiBub2RlV2lkdGgsXG4gICAgaGVpZ2h0OiBub2RlSGVpZ2h0LFxuICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgfTtcblxuXG5cblx0Y29uc3QgdGlsZVJlbGF0aXZlQ29udGFpbmVyU3R5bGUgPSB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIH07XG5cblx0Y29uc3QgZGVsdGEgPSBwYWRkaW5nID8gYCR7Z2FwLzJ9cHhgIDogdW5kZWZpbmVkO1xuXHRjb25zdCB3aWR0aCA9IHBhZGRpbmcgPyBub2RlV2lkdGgtZ2FwIDogbm9kZVdpZHRoO1xuXHRjb25zdCBoZWlnaHQgPSBwYWRkaW5nID8gbm9kZUhlaWdodC1nYXAgOiBub2RlSGVpZ2h0O1xuXG5cdGNvbnN0IG5vZGVTdHlsZSA9IHtcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0bGVmdDogZGVsdGEsXG5cdFx0dG9wOiBkZWx0YSxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICFpbWFnZUdldHRlciA/IGNvbG9yVmFsdWUgOiAnbm9uZScsXG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHpJbmRleDogIWltYWdlR2V0dGVyID8gMSA6IDIsXG5cdFx0Y3Vyc29yOiAncG9pbnRlcicsXG5cdH07XG5cblx0bGV0IGltYWdlVUkgPSBudWxsO1xuXHRpZihpbWFnZUdldHRlcil7XG5cdFx0Y29uc3QgaW1hZ2VVUkwgPSBpbWFnZUdldHRlcihkYXRhKTtcblx0XHRpZihpbWFnZVVSTCl7XG4gICAgICBpbWFnZVVJID0gW107XG5cdFx0XHRjb25zdCBpbWdTdHlsZSA9ICB7XG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHRcdFx0XHRkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGxlZnQ6IGRlbHRhLFxuICAgICAgICB0b3A6IGRlbHRhLFxuXHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0XHRvYmplY3RGaXQ6ICdjb3Zlcidcblx0XHRcdH07XG4gICAgICBpbWFnZVVJLnB1c2goPGltZyBrZXk9J3RpbGUtaW1hZ2UnIGNsYXNzTmFtZT0ndGlsZS1pbWFnZScgc3R5bGU9e2ltZ1N0eWxlfSBzcmM9e2ltYWdlVVJMfSAvPik7XG5cblxuICAgICAgaWYoaXNBY3RpdmUgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgIGNvbnN0IG92ZXJsYXlTdHlsZSA9ICB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgbGVmdDogZGVsdGEsXG4gICAgICAgICAgdG9wOiBkZWx0YSxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgb3BhY2l0eTogKGlzQWN0aXZlKT8gJzAnIDogJzgwJScsXG4gICAgICAgICAgekluZGV4OiAxLFxuICAgICAgICB9O1xuXG4gICAgICAgIGltYWdlVUkucHVzaChcbiAgICAgICAgICA8ZGl2IGtleT0ndGlsZS1vdmVybGF5JyAgY2xhc3NOYW1lPSd0aWxlLW92ZXJsYXknIHN0eWxlPXtvdmVybGF5U3R5bGV9PjwvZGl2PlxuICAgICAgICApO1xuICAgICAgfVxuXG5cdFx0fVxuXHR9XG5cblx0Y29uc3Qgbm9kZUNvbnRlbnRTdHlsZSA9IHtcblx0XHRwYWRkaW5nOiAnOHB4Jyxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0ZmxleDogJzEnXG5cdH07XG5cblx0Y29uc3QgbGFiZWxTdHlsZSA9IHtcblx0XHRjb2xvcjogJ3doaXRlJyxcblx0XHRhbGlnblNlbGY6ICdmbGV4LWVuZCdcblx0fTtcblxuXHRyZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3RpbGVTdHlsZX0+XG4gICAgICA8ZGl2IHN0eWxlPXt0aWxlUmVsYXRpdmVDb250YWluZXJTdHlsZX0+XG4gICAgICAgIDxkaXYga2V5PSd0aWxlJyAgc3R5bGU9e25vZGVTdHlsZX0gb25DbGljaz17b25DbGlja30+XG4gICAgICAgICAgPGRpdiBzdHlsZT17bm9kZUNvbnRlbnRTdHlsZX0gPlxuICAgICAgICAgICAgeyBzaG93TGFiZWwgPyA8bGFiZWwgc3R5bGU9e2xhYmVsU3R5bGV9PntuYW1lfTwvbGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtpbWFnZVVJfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59IiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NvbXB1dGVUcmVlQXR0cmlidXRlc0FuZEdldFJvb3QsIGNvbXB1dGVMYXlvdXRWYWx1ZXMsXG5cdGdldExpbmVhclNjYWxlR2V0dGVyLCBnZXRPcmRpbmFsU2NhbGVHZXR0ZXJ9IGZyb20gJ2Fic3RyYWN0L2QzSGVscGVyJztcblxuaW1wb3J0IFRpbGUgZnJvbSAnLi9UaWxlJztcblxuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJlZU1hcChwcm9wcyl7XG5cdGNvbnN0IHtkYXRhLCB3aWR0aCA9IDUwMCwgaGVpZ2h0ID0gNTAwLHN1bUl0ZXJhdG9yLCBvblRpbGVDbGljaywgaW1hZ2VHZXR0ZXIsIGFjdGl2ZUlkLCBzaG93TGFiZWwgPSBmYWxzZSwgZ2FwfSA9IHByb3BzO1xuXG5cdC8qIEhvb2tzICovXG5cdGNvbnN0IFtyb290Tm9kZSwgc2V0Um9vdE5vZGVdID0gdXNlU3RhdGUobnVsbCk7XG5cdGNvbnN0IHhTY2FsZVJlZiA9IHVzZVJlZihudWxsKTtcblx0Y29uc3QgeVNjYWxlUmVmID0gdXNlUmVmKG51bGwpO1xuXHRjb25zdCBjb2xvclNjYWxlUmVmID0gdXNlUmVmKG51bGwpO1xuXG5cdHVzZUVmZmVjdCgoKT0+e1xuXHRcdC8vIDEuIFNldCBTY2FsaW5nXG5cdFx0eFNjYWxlUmVmLmN1cnJlbnQgPSBnZXRMaW5lYXJTY2FsZUdldHRlcih3aWR0aCk7XG5cdFx0eVNjYWxlUmVmLmN1cnJlbnQgPSBnZXRMaW5lYXJTY2FsZUdldHRlcihoZWlnaHQpO1xuXHRcdGNvbG9yU2NhbGVSZWYuY3VycmVudCA9IGdldE9yZGluYWxTY2FsZUdldHRlcigpO1xuXG5cdFx0Ly8gMi4gQ29tcHV0ZSBUcmVlIEF0dHJpYnV0ZXMgKCB2YWx1ZSwgaGVpZ2h0LCBkZXB0aClcblx0XHRjb25zdCBjb21wdXRlZFJvb3ROb2RlID0gY29tcHV0ZVRyZWVBdHRyaWJ1dGVzQW5kR2V0Um9vdChkYXRhLCBzdW1JdGVyYXRvcik7XG5cblx0XHQvLyAzLiBDb21wdXRlIExheW91dCBWYWx1ZXMgKHgwLCB4MSwgeTAsIHkxKSBmb3IgcmVuZGVyaW5nXG5cdFx0Y29tcHV0ZUxheW91dFZhbHVlcyh3aWR0aCwgaGVpZ2h0LCBjb21wdXRlZFJvb3ROb2RlKTtcblxuXHRcdHNldFJvb3ROb2RlKGNvbXB1dGVkUm9vdE5vZGUpO1xuXG5cdH0sW3dpZHRoLCBoZWlnaHRdKTtcblxuXG5cdGlmKCFyb290Tm9kZSB8fCAhZGF0YS5jaGlsZHJlbil7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0LyogVUkgcmVuZGVyaW5nICovXG5cdGxldCBub2Rlc1VJO1xuXHRjb25zdCBub2RlcyA9IHJvb3ROb2RlLmNoaWxkcmVuO1xuXHRpZiAobm9kZXMgJiYgbm9kZXMubGVuZ3RoID4gMCkge1xuXHRcdG5vZGVzVUkgPSBub2Rlcy5tYXAoKGNoaWxkTm9kZSAsIGluZGV4KT0+e1xuXHRcdCAgY29uc3QgaXNBY3RpdmUgPSBhY3RpdmVJZCAhPT0gdW5kZWZpbmVkID8gYWN0aXZlSWQgPT0gY2hpbGROb2RlLmRhdGEuaWQgOiB1bmRlZmluZWRcblx0XHRcdHJldHVybiA8VGlsZSBrZXk9e2luZGV4fSBub2RlPXtjaGlsZE5vZGV9XG5cdFx0XHRcdFx0XHRcdFx0XHQgc2hvd0xhYmVsPXtzaG93TGFiZWx9XG5cdFx0XHRcdFx0XHRcdFx0XHQgaXNBY3RpdmU9e2lzQWN0aXZlfVxuXHRcdFx0XHRcdFx0XHRcdFx0IGltYWdlR2V0dGVyPXtpbWFnZUdldHRlcn1cblx0XHRcdFx0XHRcdFx0XHRcdCBvbkNsaWNrPXsoKT0+b25UaWxlQ2xpY2soY2hpbGROb2RlLmRhdGEpfVxuXHRcdFx0XHRcdFx0XHRcdFx0IHhTY2FsZT17eFNjYWxlUmVmLmN1cnJlbnR9XG5cdFx0XHRcdFx0XHRcdFx0XHQgeVNjYWxlPXt5U2NhbGVSZWYuY3VycmVudH1cbiAgICAgICAgICAgICAgICAgICBnYXA9e2dhcH1cblx0XHRcdFx0XHRcdFx0XHRcdCBjb2xvclNjYWxlPXtjb2xvclNjYWxlUmVmLmN1cnJlbnR9Lz5cblx0XHR9KTtcblx0fVxuXG5cdGNvbnN0IHJlbGF0aXZlQ29udGFpbmVyU3R5bGUgPSB7XG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0XG5cdH07XG5cblx0Y29uc3QgYWJzb2x1dGVDb250YWluZXJTdHlsZSA9IHtcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHR0b3A6IDAsXG5cdFx0bGVmdDogMCxcblx0XHR3aWR0aDogd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHRcblx0fTtcblxuXHRyZXR1cm4gKFxuXHQ8ZGl2IGNsYXNzTmFtZT0ndHJlZS1tYXAnPlxuXHRcdDxkaXYgc3R5bGU9e3JlbGF0aXZlQ29udGFpbmVyU3R5bGV9PlxuXHRcdFx0PGRpdiBzdHlsZT17YWJzb2x1dGVDb250YWluZXJTdHlsZX0+XG5cdFx0XHRcdHtub2Rlc1VJfVxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuXHQpXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAnLi9zdHlsZS5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFsYnVtKHByb3BzKSB7XG5cblx0Y29uc3Qge2RhdGEsIG9uQ2xpY2t9ID0gcHJvcHM7XG5cdGNvbnN0IHtuYW1lLCBsaW5rOmFsYnVtTGluaywgcGhvdG9zfSA9IGRhdGE7XG5cblx0IGxldCBpbWFnZXNVSSA9IHBob3Rvcy5kYXRhLm1hcCgoaW1hZ2VPYmosIGluZGV4KT0+e1xuXHQgXHRjb25zdCB7aWQsIGltYWdlczpzaXplZEltYWdlcywgbGlua30gPSBpbWFnZU9iajtcblx0XHQgcmV0dXJuIChcblx0XHQgXHRcdDxkaXYgY2xhc3NOYW1lPSdhbGJ1bS1pbWFnZSc+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9J2FsYnVtLWltYWdlLWxpbmsnPjxhIGhyZWY9e2xpbmt9IHRhcmdldD0nX2JsYW5rJz5MaW5rPC9hPjwvZGl2PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPSdhbGJ1bS1pbWFnZS1vdmVybGF5Jy8+XG5cdFx0XHRcdFx0PGltZyBzcmM9e3NpemVkSW1hZ2VzWzFdLnNvdXJjZX0vPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHQgKVxuXHQgfSk7XG5cblx0cmV0dXJuIChcblx0PGRpdiBjbGFzc05hbWU9J2FsYnVtLWNvbnRhaW5lcic+XG5cdFx0PGRpdiBjbGFzc05hbWU9J2FsYnVtLXBhdGgnPlxuXHRcdFx0PGEgY2xhc3NOYW1lPSdhbGJ1bS1saW5rJyBvbkNsaWNrPXsoKSA9PiBvbkNsaWNrKCl9PkFsYnVtczwvYT5cblx0XHRcdDxzcGFuIGNsYXNzTmFtZT0nYWxidW0tcGF0aC1zZXBhcmF0b3InPiYjNDc7PC9zcGFuPlxuXHRcdFx0e25hbWV9XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBjbGFzc05hbWU9J2FsYnVtJz5cblx0XHRcdHsgaW1hZ2VzVUl9XG5cdFx0PC9kaXY+XG5cdDwvZGl2Pilcbn0iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyZWVNYXAgZnJvbSAnYWJzdHJhY3QvdWkvdHJlZW1hcCc7XG5pbXBvcnQge3VzZUdldEFsYnVtc30gZnJvbSAnY29udGV4dC9jb25zdW1lcic7XG5pbXBvcnQgQWxidW0gZnJvbSBcIi4vYWxidW1cIjtcblxuXG5mdW5jdGlvbiBleGNsdWRlQWxidW1zKGFsYnVtcyl7XG5cblxuXHRjb25zdCBmaWx0ZXJlZEFsYnVtcyA9IFtdO1xuXG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhbGJ1bXMubGVuZ3RoOyBpKyspe1xuXHRcdGNvbnN0IGFsYnVtID0gYWxidW1zW2ldO1xuXHRcdGlmKGFsYnVtLm5hbWUgIT0gJ1Byb2ZpbGUgcGljdHVyZXMnICYmIGFsYnVtLm5hbWUgIT0gJ0NvdmVyIHBob3RvcycgJiYgYWxidW0ubmFtZSAhPSAnVGltZWxpbmUgUGhvdG9zJyl7XG5cdFx0XHRmaWx0ZXJlZEFsYnVtcy5wdXNoKGFsYnVtKTtcblx0XHR9XG5cdH1cblxuXG5cdHJldHVybiBmaWx0ZXJlZEFsYnVtcztcblxuXG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBbGJ1bXMocHJvcHMpe1xuICBjb25zdCB7Z2FwfSA9IHByb3BzO1xuXHRjb25zdCBhbGJ1bXMgPSB1c2VHZXRBbGJ1bXMoKTsgLy8gYWNjZXNzIGRhdGEgZnJvbSB0b3AgbGV2ZWwgdGhyb3VnaCBjb250ZXh0IGluc3RlYWQgb2YgcHJvcHNcblx0Y29uc3QgW2FjdGl2ZURhdGEsIHNldEFjdGl2ZURhdGFdID0gdXNlU3RhdGUobnVsbCk7XG5cblxuXHRpZighYWxidW1zIHx8IGFsYnVtcy5sZW5ndGggPT0gMCl7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiB0aWxlQ2xpY2tIYW5kbGVyKGRhdGEpe1xuXHRcdHNldEFjdGl2ZURhdGEoZGF0YSlcblx0fVxuXG5cdGZ1bmN0aW9uIGltYWdlR2V0dGVyKGRhdGEpe1xuXHRcdGNvbnN0IHtwaG90b3N9ID0gZGF0YTtcblx0XHRpZihwaG90b3MgJiYgcGhvdG9zLmRhdGEpIHtcblx0XHRcdHJldHVybiBcdHBob3Rvcy5kYXRhWzBdLmltYWdlc1swXS5zb3VyY2U7XG5cdFx0fVxuXHRcdHJldHVybiAgJydcblx0fVxuXG5cdGNvbnN0IGZpbHRlcmVkQWxidW1zID0gZXhjbHVkZUFsYnVtcyhhbGJ1bXMuZGF0YSk7XG5cdGNvbnN0IHRyZWVEYXRhID0gIHtcblx0XHRuYW1lOiAnYWxidW1zJyxcblx0XHRjaGlsZHJlbjogZmlsdGVyZWRBbGJ1bXNcblx0fTtcblxuXHRjb25zdCBzdW1JdGVyYXRvciA9IChpdGVtKT0+e1xuXHRcdHJldHVybiAxO1xuXHR9O1xuXG5cdGxldCB1aSA9IG51bGw7XG5cdGlmKGFjdGl2ZURhdGEpe1xuXHRcdHVpID0gKFxuXHRcdFx0PEFsYnVtIGRhdGE9e2FjdGl2ZURhdGF9IG9uQ2xpY2s9e3RpbGVDbGlja0hhbmRsZXJ9Lz5cblx0XHQpXG5cdH0gZWxzZSB7XG5cdFx0dWkgPSA8VHJlZU1hcCBnYXA9e2dhcH0gZGF0YT17dHJlZURhdGF9IG9uVGlsZUNsaWNrPXt0aWxlQ2xpY2tIYW5kbGVyfVxuXHRcdFx0XHRcdFx0IHdpZHRoPXs4NDB9XG5cdFx0XHRcdFx0XHQgaW1hZ2VHZXR0ZXI9e2ltYWdlR2V0dGVyfVxuXHRcdFx0XHRcdFx0IHN1bUl0ZXJhdG9yPXtzdW1JdGVyYXRvcn1cblx0XHRcdFx0XHRcdCBzaG93TGFiZWw9e3RydWV9XG5cdFx0XHRcdFx0XHQgaGVpZ2h0PXs0MDB9Lz5cblx0fVxuXG5cdHJldHVybiAoXG5cdDxkaXYgY2xhc3NOYW1lPSdhbGJ1bXMtY29udGFpbmVyJz5cblx0XHR7dWl9XG5cdDwvZGl2PlxuXHQpXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7U2VydmljZVByb3ZpZGVyfSBmcm9tICdjb250ZXh0L3Byb3ZpZGVyJztcbmltcG9ydCBBbGJ1bXMgZnJvbSAnY29tcG9uZW50cy9hbGJ1bXMnO1xuXG4vL3RvZG86IHdyaXRlIHF1ZXJ5QnVpbGRlciBxdWVyeSBmb3IgZmFjZWJvb2sgZXZlbnRzXG5jb25zdCB0b2tlbiA9IGBFQUFHTGdaQjV4b2NJQkFCbmVpOGtaQVpBSmZqZ01kdkFjRURHWERPM1YwSjRFRTVUTkNwMGZySnc5U1Q2ZWR6VWNmeXUwTFBTY0dvNTdsYzZoTW9SM1NwdVBHZ0I2MEQxQTdLOFZkMUhnWkFidk4xM01NRTRpbVJaQkI4YlZlVENvNldFWkJMTlVlUHVJcm9iaTBsYlpCdnBXbFBySTk2WWR2MXdFNWF3OGdOSXdaRFpEYFxuY29uc3QgYWxidW1zVXJsID0gYGh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2ZpZWxkcz1hbGJ1bXN7bmFtZSxsaW5rLHBob3Rvc3tsaW5rLGltYWdlc319JmFjY2Vzc190b2tlbj0ke3Rva2VufWA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHYWxsZXJ5KHByb3BzKXtcblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT0nZ2FsbGVyeS1wYWdlJz5cblx0XHRcdDxTZXJ2aWNlUHJvdmlkZXIgdXJsPXthbGJ1bXNVcmx9IG1ldGhvZD1cIkdFVFwiIHR5cGU9XCJhbGJ1bXNcIj5cblx0XHRcdFx0XHQ8QWxidW1zIGdhcD17MzJ9Lz5cblx0XHRcdDwvU2VydmljZVByb3ZpZGVyPlxuXHRcdDwvZGl2PlxuXHQpXG59Il0sInNvdXJjZVJvb3QiOiIifQ==